[core]
; just making sure those eol's stay as they are
	autocrlf = false
[alias]
; from http://www.jukie.net/bart/blog/pimping-out-git-log, with author displayed
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	lgb = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --branches --all
	lga = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	lgba = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --branches --all
	st=status
	br=branch
	ignore = update-index --assume-unchanged
	unignore = update-index --no-assume-unchanged
	aliases=config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | awk '{printf 033[1;31m  033[0m; =; print bin/bash;}'
	lo=!sh -c 'git log $1' -
	;impact=!git ls-files -z | xargs -0n1 git blame -w -C | sed -r 's/^[^(]+\((.*) [0-9]{4}-.*/\1/' | sed -r 's/ +$//' | sort -f | uniq -c | sort -nr
	; from http://stackoverflow.com/a/11768870/6309
	change-commits=!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter "if [[ $`echo $VAR` = \"$OLD\" ]]; then export $VAR=\"$NEW\"; fi" $@; }; f

[color]
; I want colors!
        ui = always
[push]
	default = simple
